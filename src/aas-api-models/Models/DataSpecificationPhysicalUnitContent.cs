/*
 * DotAAS Part 2 | HTTP/REST | Asset Administration Shell Repository
 *
 * An exemplary interface combination for the use case of an Asset Administration Shell Repository
 *
 * OpenAPI spec version: Final-Draft
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace AAS.API.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DataSpecificationPhysicalUnitContent : IEquatable<DataSpecificationPhysicalUnitContent>
    { 
        /// <summary>
        /// Gets or Sets ConversionFactor
        /// </summary>

        [DataMember(Name="conversionFactor")]
        public string ConversionFactor { get; set; }

        /// <summary>
        /// Gets or Sets Definition
        /// </summary>
        [Required]

        [DataMember(Name="definition")]
        public List<LangString> Definition { get; set; }

        /// <summary>
        /// Gets or Sets DinNotation
        /// </summary>

        [DataMember(Name="dinNotation")]
        public string DinNotation { get; set; }

        /// <summary>
        /// Gets or Sets EceCode
        /// </summary>

        [DataMember(Name="eceCode")]
        public string EceCode { get; set; }

        /// <summary>
        /// Gets or Sets EceName
        /// </summary>

        [DataMember(Name="eceName")]
        public string EceName { get; set; }

        /// <summary>
        /// Gets or Sets NistName
        /// </summary>

        [DataMember(Name="nistName")]
        public string NistName { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationAuthorityId
        /// </summary>

        [DataMember(Name="registrationAuthorityId")]
        public string RegistrationAuthorityId { get; set; }

        /// <summary>
        /// Gets or Sets SiName
        /// </summary>

        [DataMember(Name="siName")]
        public string SiName { get; set; }

        /// <summary>
        /// Gets or Sets SiNotation
        /// </summary>

        [DataMember(Name="siNotation")]
        public string SiNotation { get; set; }

        /// <summary>
        /// Gets or Sets SourceOfDefinition
        /// </summary>

        [DataMember(Name="sourceOfDefinition")]
        public string SourceOfDefinition { get; set; }

        /// <summary>
        /// Gets or Sets Supplier
        /// </summary>

        [DataMember(Name="supplier")]
        public string Supplier { get; set; }

        /// <summary>
        /// Gets or Sets UnitName
        /// </summary>
        [Required]

        [DataMember(Name="unitName")]
        public string UnitName { get; set; }

        /// <summary>
        /// Gets or Sets UnitSymbol
        /// </summary>
        [Required]

        [DataMember(Name="unitSymbol")]
        public string UnitSymbol { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataSpecificationPhysicalUnitContent {\n");
            sb.Append("  ConversionFactor: ").Append(ConversionFactor).Append("\n");
            sb.Append("  Definition: ").Append(Definition).Append("\n");
            sb.Append("  DinNotation: ").Append(DinNotation).Append("\n");
            sb.Append("  EceCode: ").Append(EceCode).Append("\n");
            sb.Append("  EceName: ").Append(EceName).Append("\n");
            sb.Append("  NistName: ").Append(NistName).Append("\n");
            sb.Append("  RegistrationAuthorityId: ").Append(RegistrationAuthorityId).Append("\n");
            sb.Append("  SiName: ").Append(SiName).Append("\n");
            sb.Append("  SiNotation: ").Append(SiNotation).Append("\n");
            sb.Append("  SourceOfDefinition: ").Append(SourceOfDefinition).Append("\n");
            sb.Append("  Supplier: ").Append(Supplier).Append("\n");
            sb.Append("  UnitName: ").Append(UnitName).Append("\n");
            sb.Append("  UnitSymbol: ").Append(UnitSymbol).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DataSpecificationPhysicalUnitContent)obj);
        }

        /// <summary>
        /// Returns true if DataSpecificationPhysicalUnitContent instances are equal
        /// </summary>
        /// <param name="other">Instance of DataSpecificationPhysicalUnitContent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataSpecificationPhysicalUnitContent other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ConversionFactor == other.ConversionFactor ||
                    ConversionFactor != null &&
                    ConversionFactor.Equals(other.ConversionFactor)
                ) && 
                (
                    Definition == other.Definition ||
                    Definition != null &&
                    Definition.SequenceEqual(other.Definition)
                ) && 
                (
                    DinNotation == other.DinNotation ||
                    DinNotation != null &&
                    DinNotation.Equals(other.DinNotation)
                ) && 
                (
                    EceCode == other.EceCode ||
                    EceCode != null &&
                    EceCode.Equals(other.EceCode)
                ) && 
                (
                    EceName == other.EceName ||
                    EceName != null &&
                    EceName.Equals(other.EceName)
                ) && 
                (
                    NistName == other.NistName ||
                    NistName != null &&
                    NistName.Equals(other.NistName)
                ) && 
                (
                    RegistrationAuthorityId == other.RegistrationAuthorityId ||
                    RegistrationAuthorityId != null &&
                    RegistrationAuthorityId.Equals(other.RegistrationAuthorityId)
                ) && 
                (
                    SiName == other.SiName ||
                    SiName != null &&
                    SiName.Equals(other.SiName)
                ) && 
                (
                    SiNotation == other.SiNotation ||
                    SiNotation != null &&
                    SiNotation.Equals(other.SiNotation)
                ) && 
                (
                    SourceOfDefinition == other.SourceOfDefinition ||
                    SourceOfDefinition != null &&
                    SourceOfDefinition.Equals(other.SourceOfDefinition)
                ) && 
                (
                    Supplier == other.Supplier ||
                    Supplier != null &&
                    Supplier.Equals(other.Supplier)
                ) && 
                (
                    UnitName == other.UnitName ||
                    UnitName != null &&
                    UnitName.Equals(other.UnitName)
                ) && 
                (
                    UnitSymbol == other.UnitSymbol ||
                    UnitSymbol != null &&
                    UnitSymbol.Equals(other.UnitSymbol)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ConversionFactor != null)
                    hashCode = hashCode * 59 + ConversionFactor.GetHashCode();
                    if (Definition != null)
                    hashCode = hashCode * 59 + Definition.GetHashCode();
                    if (DinNotation != null)
                    hashCode = hashCode * 59 + DinNotation.GetHashCode();
                    if (EceCode != null)
                    hashCode = hashCode * 59 + EceCode.GetHashCode();
                    if (EceName != null)
                    hashCode = hashCode * 59 + EceName.GetHashCode();
                    if (NistName != null)
                    hashCode = hashCode * 59 + NistName.GetHashCode();
                    if (RegistrationAuthorityId != null)
                    hashCode = hashCode * 59 + RegistrationAuthorityId.GetHashCode();
                    if (SiName != null)
                    hashCode = hashCode * 59 + SiName.GetHashCode();
                    if (SiNotation != null)
                    hashCode = hashCode * 59 + SiNotation.GetHashCode();
                    if (SourceOfDefinition != null)
                    hashCode = hashCode * 59 + SourceOfDefinition.GetHashCode();
                    if (Supplier != null)
                    hashCode = hashCode * 59 + Supplier.GetHashCode();
                    if (UnitName != null)
                    hashCode = hashCode * 59 + UnitName.GetHashCode();
                    if (UnitSymbol != null)
                    hashCode = hashCode * 59 + UnitSymbol.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DataSpecificationPhysicalUnitContent left, DataSpecificationPhysicalUnitContent right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DataSpecificationPhysicalUnitContent left, DataSpecificationPhysicalUnitContent right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
