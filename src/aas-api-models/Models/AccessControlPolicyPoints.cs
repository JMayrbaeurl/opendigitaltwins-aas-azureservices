/*
 * DotAAS Part 2 | HTTP/REST | Asset Administration Shell Repository
 *
 * An exemplary interface combination for the use case of an Asset Administration Shell Repository
 *
 * OpenAPI spec version: Final-Draft
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace AAS.API.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AccessControlPolicyPoints : IEquatable<AccessControlPolicyPoints>
    { 
        /// <summary>
        /// Gets or Sets PolicyAdministrationPoint
        /// </summary>
        [Required]

        [DataMember(Name="policyAdministrationPoint")]
        public PolicyAdministrationPoint PolicyAdministrationPoint { get; set; }

        /// <summary>
        /// Gets or Sets PolicyDecisionPoint
        /// </summary>
        [Required]

        [DataMember(Name="policyDecisionPoint")]
        public PolicyDecisionPoint PolicyDecisionPoint { get; set; }

        /// <summary>
        /// Gets or Sets PolicyEnforcementPoint
        /// </summary>
        [Required]

        [DataMember(Name="policyEnforcementPoint")]
        public PolicyEnforcementPoint PolicyEnforcementPoint { get; set; }

        /// <summary>
        /// Gets or Sets PolicyInformationPoints
        /// </summary>

        [DataMember(Name="policyInformationPoints")]
        public PolicyInformationPoints PolicyInformationPoints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccessControlPolicyPoints {\n");
            sb.Append("  PolicyAdministrationPoint: ").Append(PolicyAdministrationPoint).Append("\n");
            sb.Append("  PolicyDecisionPoint: ").Append(PolicyDecisionPoint).Append("\n");
            sb.Append("  PolicyEnforcementPoint: ").Append(PolicyEnforcementPoint).Append("\n");
            sb.Append("  PolicyInformationPoints: ").Append(PolicyInformationPoints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AccessControlPolicyPoints)obj);
        }

        /// <summary>
        /// Returns true if AccessControlPolicyPoints instances are equal
        /// </summary>
        /// <param name="other">Instance of AccessControlPolicyPoints to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccessControlPolicyPoints other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PolicyAdministrationPoint == other.PolicyAdministrationPoint ||
                    PolicyAdministrationPoint != null &&
                    PolicyAdministrationPoint.Equals(other.PolicyAdministrationPoint)
                ) && 
                (
                    PolicyDecisionPoint == other.PolicyDecisionPoint ||
                    PolicyDecisionPoint != null &&
                    PolicyDecisionPoint.Equals(other.PolicyDecisionPoint)
                ) && 
                (
                    PolicyEnforcementPoint == other.PolicyEnforcementPoint ||
                    PolicyEnforcementPoint != null &&
                    PolicyEnforcementPoint.Equals(other.PolicyEnforcementPoint)
                ) && 
                (
                    PolicyInformationPoints == other.PolicyInformationPoints ||
                    PolicyInformationPoints != null &&
                    PolicyInformationPoints.Equals(other.PolicyInformationPoints)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PolicyAdministrationPoint != null)
                    hashCode = hashCode * 59 + PolicyAdministrationPoint.GetHashCode();
                    if (PolicyDecisionPoint != null)
                    hashCode = hashCode * 59 + PolicyDecisionPoint.GetHashCode();
                    if (PolicyEnforcementPoint != null)
                    hashCode = hashCode * 59 + PolicyEnforcementPoint.GetHashCode();
                    if (PolicyInformationPoints != null)
                    hashCode = hashCode * 59 + PolicyInformationPoints.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AccessControlPolicyPoints left, AccessControlPolicyPoints right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AccessControlPolicyPoints left, AccessControlPolicyPoints right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
