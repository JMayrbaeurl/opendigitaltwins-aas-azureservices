/*
 * DotAAS Part 2 | HTTP/REST | Entire API Collection
 *
 * The entire API collection as part of Details of the Asset Administration Shell Part 2
 *
 * OpenAPI spec version: V1.0RC03
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace AAS.API.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ProtocolInformation : IEquatable<ProtocolInformation>
    { 
        /// <summary>
        /// Gets or Sets EndpointAddress
        /// </summary>
        [Required]

        [DataMember(Name="endpointAddress")]
        public string EndpointAddress { get; set; }

        /// <summary>
        /// Gets or Sets EndpointProtocol
        /// </summary>

        [DataMember(Name="endpointProtocol")]
        public string EndpointProtocol { get; set; }

        /// <summary>
        /// Gets or Sets EndpointProtocolVersion
        /// </summary>

        [DataMember(Name="endpointProtocolVersion")]
        public string EndpointProtocolVersion { get; set; }

        /// <summary>
        /// Gets or Sets Subprotocol
        /// </summary>

        [DataMember(Name="subprotocol")]
        public string Subprotocol { get; set; }

        /// <summary>
        /// Gets or Sets SubprotocolBody
        /// </summary>

        [DataMember(Name="subprotocolBody")]
        public string SubprotocolBody { get; set; }

        /// <summary>
        /// Gets or Sets SubprotocolBodyEncoding
        /// </summary>

        [DataMember(Name="subprotocolBodyEncoding")]
        public string SubprotocolBodyEncoding { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProtocolInformation {\n");
            sb.Append("  EndpointAddress: ").Append(EndpointAddress).Append("\n");
            sb.Append("  EndpointProtocol: ").Append(EndpointProtocol).Append("\n");
            sb.Append("  EndpointProtocolVersion: ").Append(EndpointProtocolVersion).Append("\n");
            sb.Append("  Subprotocol: ").Append(Subprotocol).Append("\n");
            sb.Append("  SubprotocolBody: ").Append(SubprotocolBody).Append("\n");
            sb.Append("  SubprotocolBodyEncoding: ").Append(SubprotocolBodyEncoding).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProtocolInformation)obj);
        }

        /// <summary>
        /// Returns true if ProtocolInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of ProtocolInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProtocolInformation other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    EndpointAddress == other.EndpointAddress ||
                    EndpointAddress != null &&
                    EndpointAddress.Equals(other.EndpointAddress)
                ) && 
                (
                    EndpointProtocol == other.EndpointProtocol ||
                    EndpointProtocol != null &&
                    EndpointProtocol.Equals(other.EndpointProtocol)
                ) && 
                (
                    EndpointProtocolVersion == other.EndpointProtocolVersion ||
                    EndpointProtocolVersion != null &&
                    EndpointProtocolVersion.Equals(other.EndpointProtocolVersion)
                ) && 
                (
                    Subprotocol == other.Subprotocol ||
                    Subprotocol != null &&
                    Subprotocol.Equals(other.Subprotocol)
                ) && 
                (
                    SubprotocolBody == other.SubprotocolBody ||
                    SubprotocolBody != null &&
                    SubprotocolBody.Equals(other.SubprotocolBody)
                ) && 
                (
                    SubprotocolBodyEncoding == other.SubprotocolBodyEncoding ||
                    SubprotocolBodyEncoding != null &&
                    SubprotocolBodyEncoding.Equals(other.SubprotocolBodyEncoding)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (EndpointAddress != null)
                    hashCode = hashCode * 59 + EndpointAddress.GetHashCode();
                    if (EndpointProtocol != null)
                    hashCode = hashCode * 59 + EndpointProtocol.GetHashCode();
                    if (EndpointProtocolVersion != null)
                    hashCode = hashCode * 59 + EndpointProtocolVersion.GetHashCode();
                    if (Subprotocol != null)
                    hashCode = hashCode * 59 + Subprotocol.GetHashCode();
                    if (SubprotocolBody != null)
                    hashCode = hashCode * 59 + SubprotocolBody.GetHashCode();
                    if (SubprotocolBodyEncoding != null)
                    hashCode = hashCode * 59 + SubprotocolBodyEncoding.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProtocolInformation left, ProtocolInformation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProtocolInformation left, ProtocolInformation right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
