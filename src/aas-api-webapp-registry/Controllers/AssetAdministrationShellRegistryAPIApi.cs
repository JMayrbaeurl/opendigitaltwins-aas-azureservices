/*
 * DotAAS Part 2 | HTTP/REST | Entire API Collection
 *
 * The entire API collection as part of Details of the Asset Administration Shell Part 2
 *
 * OpenAPI spec version: V1.0RC03
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using AAS.API.Attributes;

using Microsoft.AspNetCore.Authorization;
using AAS.API.Models;
using Microsoft.Extensions.Logging;
using AAS.API.Registry;
using System.Web;
using System.Net.WebSockets;
using AAS.API.Interfaces;

namespace AAS.API.WebApp.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [Authorize]
    [ApiController]
    public class AssetAdministrationShellRegistryAPIApiController : ControllerBase
    {
        private readonly ILogger _logger;

        private AASRegistry registryService;

        public AssetAdministrationShellRegistryAPIApiController(ILogger<AssetAdministrationShellRegistryAPIApiController> log, AASRegistry registry)
        {
            _logger = log;
            registryService = registry;
        }

        /// <summary>
        /// Creates a new Asset Administration Shell Descriptor, i.e. registers an AAS
        /// </summary>
        /// <param name="body">Asset Administration Shell Descriptor object</param>
        /// <response code="201">Asset Administration Shell Descriptor created successfully</response>
        /// <response code="400">Bad Request</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpPost]
        [Route("/api/v1/shell-descriptors")]
        [ValidateModelState]
        [SwaggerOperation("PostAssetAdministrationShellDescriptor")]
        [SwaggerResponse(statusCode: 201, type: typeof(AssetAdministrationShellDescriptor), description: "Asset Administration Shell Descriptor created successfully")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult PostAssetAdministrationShellDescriptor([FromBody] AssetAdministrationShellDescriptor body)
        {
            _logger.LogInformation($"PostAssetAdministrationShellDescriptor called for AAS with identifier '{body.Identification}'");

            try { 
                if (registryService == null)
                {
                    _logger.LogError("Invalid setup. No Registry service configured. Check DI setup");
                    throw new AASRegistryException("Invalid setup. No Registry service configured. Check DI setup");
                }

                var createdShellDesc = registryService.CreateAssetAdministrationShellDescriptor(body).GetAwaiter().GetResult();
                if (createdShellDesc == null)
                {
                    return StatusCode(400, new AAS.API.Models.Result()
                    {
                        Success = false,
                        Messages = new List<Message>() {
                        new Message() { MessageType = Message.MessageTypeEnum.ExceptionEnum,
                        Code = "400", Text = $"Asset Administration Shell Descriptor with identification '{body.Identification}' already exists", Timestamp = ""} }
                    });
                }
                else
                    return StatusCode(201, createdShellDesc);
            }
            catch (AASRegistryException aasEx)
            {
                return AASRegistryException(aasEx);
            }
        }

        /// <summary>
        /// Returns a specific Asset Administration Shell Descriptor
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <response code="200">Requested Asset Administration Shell Descriptor</response>
        /// <response code="404">Not Found</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("/api/v1/shell-descriptors/{aasIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("GetAssetAdministrationShellDescriptorById")]
        [SwaggerResponse(statusCode: 200, type: typeof(AssetAdministrationShellDescriptor), description: "Requested Asset Administration Shell Descriptor")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult GetAssetAdministrationShellDescriptorById([FromRoute][Required] string aasIdentifier)
        {
            _logger.LogInformation($"GetAssetAdministrationShellDescriptorById called for Asset identifier '{aasIdentifier}'");

            try
            {
                if (registryService == null)
                {
                    _logger.LogError("Invalid setup. No Registry service configured. Check DI setup");
                    throw new AASRegistryException("Invalid setup. No Registry service configured. Check DI setup");
                }

                var shellDesc = registryService.GetAssetAdministrationShellDescriptorById(HttpUtility.UrlDecode(aasIdentifier)).GetAwaiter().GetResult();

                if (shellDesc == null)
                    return NotFound();
                else
                    return new OkObjectResult(shellDesc);
            } catch (AASRegistryException aasEx)
            {
                return AASRegistryException(aasEx);
            }
        }

        /// <summary>
        /// Returns all Asset Administration Shell Descriptors
        /// </summary>
        /// <response code="200">Requested Asset Administration Shell Descriptors</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("api/v1/shell-descriptors")]
        [ValidateModelState]
        [SwaggerOperation("GetAllAssetAdministrationShellDescriptors")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AssetAdministrationShellDescriptor>), description: "Requested Asset Administration Shell Descriptors")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult GetAllAssetAdministrationShellDescriptors()
        {
            _logger.LogInformation("GetAllAssetAdministrationShellDescriptors called");

            try
            {
                if (registryService == null)
                {
                    _logger.LogError("Invalid setup. No Registry service configured. Check DI setup");
                    throw new AASRegistryException("Invalid setup. No Registry service configured. Check DI setup");
                }

                var shellDescs = registryService.GetAllAssetAdministrationShellDescriptors().GetAwaiter().GetResult();

                return new OkObjectResult(shellDescs);
            }
            catch (AASRegistryException aasEx)
            {
                return AASRegistryException(aasEx);
            }
        }

        /// <summary>
        /// Updates an existing Asset Administration Shell Descriptor
        /// </summary>
        /// <param name="body">Asset Administration Shell Descriptor object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <response code="204">Asset Administration Shell Descriptor updated successfully</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpPut]
        [Route("/api/v1/shell-descriptors/{aasIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("PutAssetAdministrationShellDescriptorById")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult PutAssetAdministrationShellDescriptorById([FromBody] AssetAdministrationShellDescriptor body, [FromRoute][Required] string aasIdentifier)
        {
            _logger.LogInformation("PutAssetAdministrationShellDescriptorById called");

            try
            {
                if (registryService == null)
                {
                    _logger.LogError("Invalid setup. No Registry service configured. Check DI setup");
                    throw new AASRegistryException("Invalid setup. No Registry service configured. Check DI setup");
                }

                if (string.IsNullOrEmpty(aasIdentifier))
                {
                    return StatusCode(400, new AAS.API.Models.Result()
                    {
                        Success = false,
                        Messages = new List<Message>() {
                            new Message() { MessageType = Message.MessageTypeEnum.ErrorEnum,
                            Code = "400", Text = "aasIdentifier must not be null or empty", 
                            Timestamp = DateTime.UtcNow.ToString("o")} }
                    });
                }

                var decodedAasIdentifier = HttpUtility.UrlDecode(aasIdentifier);

                if (body == null || !body.Identification.Equals(decodedAasIdentifier))
                {
                    return StatusCode(400, new AAS.API.Models.Result()
                    {
                        Success = false,
                        Messages = new List<Message>() {
                            new Message() { MessageType = Message.MessageTypeEnum.ErrorEnum,
                            Code = "400", Text = "Invalid request body specified",
                            Timestamp = DateTime.UtcNow.ToString("o")} }
                    });
                }

                var result = registryService.UpdateAssetAdministrationShellDescriptorById(body).GetAwaiter().GetResult();
                if (result != null)
                    return StatusCode(204);
                else
                {
                    return StatusCode(404, new AAS.API.Models.Result()
                    {
                        Success = false,
                        Messages = new List<Message>() {
                            new Message() { MessageType = Message.MessageTypeEnum.ErrorEnum,
                            Code = "404", Text = $"Shell descriptor '{decodedAasIdentifier}' doesn't exist",
                            Timestamp = DateTime.UtcNow.ToString("o")} }
                    });
                }
            }
            catch (AASRegistryException aasEx)
            {
                return AASRegistryException(aasEx);
            }
        }

        /// <summary>
        /// Deletes an Asset Administration Shell Descriptor, i.e. de-registers an AAS
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <response code="204">Asset Administration Shell Descriptor deleted successfully</response>
        /// <response code="404">Not Found</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpDelete]
        [Route("api/v1/shell-descriptors/{aasIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteAssetAdministrationShellDescriptorById")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult DeleteAssetAdministrationShellDescriptorById([FromRoute][Required] string aasIdentifier)
        {
            _logger.LogInformation($"DeleteAssetAdministrationShellDescriptorById called for Asset identifier '{aasIdentifier}'");

            try
            {
                if (registryService == null)
                {
                    _logger.LogError("Invalid setup. No Registry service configured. Check DI setup");
                    throw new AASRegistryException("Invalid setup. No Registry service configured. Check DI setup");
                }

                var decodedAasIdentifier = HttpUtility.UrlDecode(aasIdentifier);

                if (registryService.DeleteAssetAdministrationShellDescriptorById(decodedAasIdentifier).GetAwaiter().GetResult())
                    return StatusCode(204);
                else
                {
                    return StatusCode(404, new AAS.API.Models.Result()
                    {
                        Success = false,
                        Messages = new List<Message>() {
                            new Message() { MessageType = Message.MessageTypeEnum.ErrorEnum,
                            Code = "404", Text = $"Shell descriptor '{decodedAasIdentifier}' doesn't exist",
                            Timestamp = DateTime.UtcNow.ToString("o")} }
                    });
                }
            }
            catch (AASRegistryException aasEx)
            {
                return AASRegistryException(aasEx);
            }
        }

        private IActionResult AASRegistryException(AASRegistryException aasEx)
        {
            return StatusCode(500, new AAS.API.Models.Result()
            {
                Success = false,
                Messages = new List<Message>() {
                        new Message() { MessageType = Message.MessageTypeEnum.ExceptionEnum,
                        Code = "500", Text = aasEx.Message, Timestamp = DateTime.UtcNow.ToString("o")} }
            });
        }

    }
}
