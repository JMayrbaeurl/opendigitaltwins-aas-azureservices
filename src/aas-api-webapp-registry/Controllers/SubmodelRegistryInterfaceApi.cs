/*
 * DotAAS Part 2 | HTTP/REST | Entire Interface Collection
 *
 * The entire interface collection as part of Details of the Asset Administration Shell Part 2
 *
 * OpenAPI spec version: Final-Draft
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using AAS.API.Attributes;

using Microsoft.AspNetCore.Authorization;
using AAS.API.Models;
using Microsoft.Extensions.Logging;
using AAS.API.Registry;
using System.Web;

namespace AAS.API.WebApp.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [Authorize]
    [ApiController]
    public class SubmodelRegistryInterfaceApiController : ControllerBase
    {
        private readonly ILogger _logger;

        private AASRegistry registryService;

        public SubmodelRegistryInterfaceApiController(ILogger<SubmodelRegistryInterfaceApiController> log, AASRegistry registry)
        {
            _logger = log;
            registryService = registry;
        }

        /// <summary>
        /// Deletes a Submodel Descriptor, i.e. de-registers a submodel
        /// </summary>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <response code="204">Submodel Descriptor deleted successfully</response>
        [HttpDelete]
        [Route("api/v1/registry/submodel-descriptors/{submodelIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteSubmodelDescriptorById")]
        public virtual IActionResult DeleteSubmodelDescriptorById([FromRoute][Required]string submodelIdentifier)
        {
            _logger.LogInformation($"DeleteSubmodelDescriptorById called for Submodel identifier '{submodelIdentifier}'");

            if (registryService == null)
            {
                _logger.LogError("Invalid setup. No Registry service configured. Check DI setup");
                throw new AASRegistryException("Invalid setup. No Registry service configured. Check DI setup");
            }

            registryService.DeleteSubmodelDescriptorById(HttpUtility.UrlDecode(submodelIdentifier)).GetAwaiter().GetResult();

            return StatusCode(204);
        }

        /// <summary>
        /// Returns all Submodel Descriptors
        /// </summary>
        /// <response code="200">Requested Submodel Descriptors</response>
        [HttpGet]
        [Route("api/v1/registry/submodel-descriptors")]
        [ValidateModelState]
        [SwaggerOperation("GetAllSubmodelDescriptors")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<SubmodelDescriptor>), description: "Requested Submodel Descriptors")]
        public virtual IActionResult GetAllSubmodelDescriptors()
        {
            // Currently not supported. Redis Cache doesn't have 'list all' operations
            return StatusCode(200, default(List<SubmodelDescriptor>));
        }

        /// <summary>
        /// Returns a specific Submodel Descriptor
        /// </summary>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <response code="200">Requested Submodel Descriptor</response>
        [HttpGet]
        [Route("api/v1/registry/submodel-descriptors/{submodelIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("GetSubmodelDescriptorById")]
        [SwaggerResponse(statusCode: 200, type: typeof(SubmodelDescriptor), description: "Requested Submodel Descriptor")]
        public virtual IActionResult GetSubmodelDescriptorById([FromRoute][Required]string submodelIdentifier)
        { 
            _logger.LogInformation($"GetSubmodelDescriptorById called for Submodel identifier '{submodelIdentifier}'");

            if (registryService == null)
            {
                _logger.LogError("Invalid setup. No Registry service configured. Check DI setup");
                throw new AASRegistryException("Invalid setup. No Registry service configured. Check DI setup");
            }

            return new ObjectResult(registryService.GetSubmodelDescriptorById(HttpUtility.UrlDecode(submodelIdentifier)).GetAwaiter().GetResult());
        }

        /// <summary>
        /// Creates a new Submodel Descriptor, i.e. registers a submodel
        /// </summary>
        /// <param name="body">Submodel Descriptor object</param>
        /// <response code="201">Submodel Descriptor created successfully</response>
        [HttpPost]
        [Route("api/v1/registry/submodel-descriptors")]
        [ValidateModelState]
        [SwaggerOperation("PostSubmodelDescriptor")]
        [SwaggerResponse(statusCode: 201, type: typeof(SubmodelDescriptor), description: "Submodel Descriptor created successfully")]
        public virtual IActionResult PostSubmodelDescriptor([FromBody]SubmodelDescriptor body)
        {
            _logger.LogInformation($"PostSubmodelDescriptor called for Submodel with identifier '{body.Identification}'");

            if (registryService == null)
            {
                _logger.LogError("Invalid setup. No Registry service configured. Check DI setup");
                throw new AASRegistryException("Invalid setup. No Registry service configured. Check DI setup");
            }

            return StatusCode(201, registryService.CreateSubmodelDescriptor(body).GetAwaiter().GetResult());
        }

        /// <summary>
        /// Updates an existing Submodel Descriptor
        /// </summary>
        /// <param name="body">Submodel Descriptor object</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <response code="204">Submodel Descriptor updated successfully</response>
        [HttpPut]
        [Route("api/v1/registry/submodel-descriptors/{submodelIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("PutSubmodelDescriptorById")]
        public virtual IActionResult PutSubmodelDescriptorById([FromBody]SubmodelDescriptor body, [FromRoute][Required]string submodelIdentifier)
        {
            _logger.LogInformation($"PutSubmodelDescriptorById called for Submodel with identifier '{body.Identification}'");

            if (registryService == null)
            {
                _logger.LogError("Invalid setup. No Registry service configured. Check DI setup");
                throw new AASRegistryException("Invalid setup. No Registry service configured. Check DI setup");
            }

            registryService.UpdateSubmodelDescriptorById(HttpUtility.UrlDecode(submodelIdentifier), body).GetAwaiter().GetResult();

            return StatusCode(204);
        }
    }
}
