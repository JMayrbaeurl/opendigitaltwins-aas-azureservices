/*
 * DotAAS Part 2 | HTTP/REST | Entire API Collection
 *
 * The entire API collection as part of Details of the Asset Administration Shell Part 2
 *
 * OpenAPI spec version: V1.0RC03
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using AAS.API.Attributes;

using Microsoft.AspNetCore.Authorization;
using AAS.API.Models;
using AAS.API.Registry;
using Microsoft.Extensions.Logging;
using System.Web;

namespace AAS.API.WebApp.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    //[ApiController]
    public class SubmodelRegistryAPIApiController : ControllerBase
    {
        private readonly ILogger _logger;

        private AASRegistry registryService;
        public SubmodelRegistryAPIApiController(ILogger<SubmodelRegistryAPIApiController> log, AASRegistry registry)
        {
            _logger = log;
            registryService = registry;
        }

        /// <summary>
        /// Deletes a Submodel Descriptor, i.e. de-registers a submodel
        /// </summary>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <response code="204">Submodel Descriptor deleted successfully</response>
        /// <response code="404">Not Found</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpDelete]
        [Route("api/v1/submodel-descriptors/{submodelIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteSubmodelDescriptorById")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult DeleteSubmodelDescriptorById([FromRoute][Required]string submodelIdentifier)
        {
            _logger.LogInformation($"DeleteSubmodelDescriptorById called for Asset identifier '{submodelIdentifier}'");

            try
            {
                if (registryService == null)
                {
                    _logger.LogError("Invalid setup. No Registry service configured. Check DI setup");
                    throw new AASRegistryException("Invalid setup. No Registry service configured. Check DI setup");
                }

                var decodedsmIdentifier = HttpUtility.UrlDecode(submodelIdentifier);

                if (registryService.DeleteSubmodelDescriptorById(decodedsmIdentifier).GetAwaiter().GetResult())
                    return StatusCode(204);
                else
                {
                    return StatusCode(404, new AAS.API.Models.Result()
                    {
                        Success = false,
                        Messages = new List<Message>() {
                            new Message() { MessageType = Message.MessageTypeEnum.ErrorEnum,
                            Code = "404", Text = $"Submodel descriptor '{decodedsmIdentifier}' doesn't exist",
                            Timestamp = DateTime.UtcNow.ToString("o")} }
                    });
                }
            }
            catch (AASRegistryException aasEx)
            {
                return AASRegistryException(aasEx);
            }
        }

        /// <summary>
        /// Returns all Submodel Descriptors
        /// </summary>
        /// <response code="200">Requested Submodel Descriptors</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("api/v1/submodel-descriptors")]
        [ValidateModelState]
        [SwaggerOperation("GetAllSubmodelDescriptors")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<SubmodelDescriptor>), description: "Requested Submodel Descriptors")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult GetAllSubmodelDescriptors()
        { 
            _logger.LogInformation("GetAllSubmodelDescriptors called");

            try
            {
                if (registryService == null)
                {
                    _logger.LogError("Invalid setup. No Registry service configured. Check DI setup");
                    throw new AASRegistryException("Invalid setup. No Registry service configured. Check DI setup");
                }

                var submodelDescs = registryService.GetAllSubmodelDescriptors().GetAwaiter().GetResult();

                return new OkObjectResult(submodelDescs);
            }
            catch (AASRegistryException aasEx)
            {
                return AASRegistryException(aasEx);
            }
        }

        /// <summary>
        /// Returns a specific Submodel Descriptor
        /// </summary>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <response code="200">Requested Submodel Descriptor</response>
        /// <response code="404">Not Found</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpGet]
        [Route("api/v1/submodel-descriptors/{submodelIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("GetSubmodelDescriptorById")]
        [SwaggerResponse(statusCode: 200, type: typeof(SubmodelDescriptor), description: "Requested Submodel Descriptor")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult GetSubmodelDescriptorById([FromRoute][Required]string submodelIdentifier)
        { 
            _logger.LogInformation($"GetSubmodelDescriptorById called for Asset identifier '{submodelIdentifier}'");

            try
            {
                if (registryService == null)
                {
                    _logger.LogError("Invalid setup. No Registry service configured. Check DI setup");
                    throw new AASRegistryException("Invalid setup. No Registry service configured. Check DI setup");
                }

                var submodelDesc = registryService.GetSubmodelDescriptorById(HttpUtility.UrlDecode(submodelIdentifier)).GetAwaiter().GetResult();

                if (submodelDesc == null)
                    return NotFound();
                else
                    return new OkObjectResult(submodelDesc);
            }
            catch (AASRegistryException aasEx)
            {
                return AASRegistryException(aasEx);
            }
        }

        /// <summary>
        /// Creates a new Submodel Descriptor, i.e. registers a submodel
        /// </summary>
        /// <param name="body">Submodel Descriptor object</param>
        /// <response code="201">Submodel Descriptor created successfully</response>
        /// <response code="400">Bad Request</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpPost]
        [Route("api/v1/submodel-descriptors")]
        [ValidateModelState]
        [SwaggerOperation("PostSubmodelDescriptor")]
        [SwaggerResponse(statusCode: 201, type: typeof(SubmodelDescriptor), description: "Submodel Descriptor created successfully")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult PostSubmodelDescriptor([FromBody]SubmodelDescriptor body)
        {
            _logger.LogInformation($"PostSubmodelDescriptor called for Submodel with identifier '{body.Identification}'");

            try
            {
                if (registryService == null)
                {
                    _logger.LogError("Invalid setup. No Registry service configured. Check DI setup");
                    throw new AASRegistryException("Invalid setup. No Registry service configured. Check DI setup");
                }

                var createdShellDesc = registryService.CreateSubmodelDescriptor(body).GetAwaiter().GetResult();
                if (createdShellDesc == null)
                {
                    return StatusCode(400, new AAS.API.Models.Result()
                    {
                        Success = false,
                        Messages = new List<Message>() {
                        new Message() { MessageType = Message.MessageTypeEnum.ExceptionEnum,
                        Code = "400", Text = $"Submodel Descriptor with identification '{body.Identification}' already exists", Timestamp = ""} }
                    });
                }
                else
                    return StatusCode(201, createdShellDesc);
            }
            catch (AASRegistryException aasEx)
            {
                return AASRegistryException(aasEx);
            }
        }

        /// <summary>
        /// Updates an existing Submodel Descriptor
        /// </summary>
        /// <param name="body">Submodel Descriptor object</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (UTF8-BASE64-URL-encoded)</param>
        /// <response code="204">Submodel Descriptor updated successfully</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="0">Default error handling for unmentioned status codes</response>
        [HttpPut]
        [Route("api/v1/submodel-descriptors/{submodelIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("PutSubmodelDescriptorById")]
        [SwaggerResponse(statusCode: 400, type: typeof(Result), description: "Bad Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(Result), description: "Not Found")]
        [SwaggerResponse(statusCode: 0, type: typeof(Result), description: "Default error handling for unmentioned status codes")]
        public virtual IActionResult PutSubmodelDescriptorById([FromBody]SubmodelDescriptor body, [FromRoute][Required]string submodelIdentifier)
        {
            _logger.LogInformation("PutSubmodelDescriptorById called");

            try
            {
                if (registryService == null)
                {
                    _logger.LogError("Invalid setup. No Registry service configured. Check DI setup");
                    throw new AASRegistryException("Invalid setup. No Registry service configured. Check DI setup");
                }

                if (string.IsNullOrEmpty(submodelIdentifier))
                {
                    return StatusCode(400, new AAS.API.Models.Result()
                    {
                        Success = false,
                        Messages = new List<Message>() {
                            new Message() { MessageType = Message.MessageTypeEnum.ErrorEnum,
                            Code = "400", Text = "submodelIdentifier must not be null or empty",
                            Timestamp = DateTime.UtcNow.ToString("o")} }
                    });
                }

                var decodedsmIdentifier = HttpUtility.UrlDecode(submodelIdentifier);

                if (body == null || !body.Identification.Equals(decodedsmIdentifier))
                {
                    return StatusCode(400, new AAS.API.Models.Result()
                    {
                        Success = false,
                        Messages = new List<Message>() {
                            new Message() { MessageType = Message.MessageTypeEnum.ErrorEnum,
                            Code = "400", Text = "Invalid request body specified",
                            Timestamp = DateTime.UtcNow.ToString("o")} }
                    });
                }

                var result = registryService.UpdateSubmodelDescriptorById(body).GetAwaiter().GetResult();
                if (result != null)
                    return StatusCode(204);
                else
                {
                    return StatusCode(404, new AAS.API.Models.Result()
                    {
                        Success = false,
                        Messages = new List<Message>() {
                            new Message() { MessageType = Message.MessageTypeEnum.ErrorEnum,
                            Code = "404", Text = $"Submodel descriptor '{decodedsmIdentifier}' doesn't exist",
                            Timestamp = DateTime.UtcNow.ToString("o")} }
                    });
                }
            }
            catch (AASRegistryException aasEx)
            {
                return AASRegistryException(aasEx);
            }
        }

        private IActionResult AASRegistryException(AASRegistryException aasEx)
        {
            return StatusCode(500, new AAS.API.Models.Result()
            {
                Success = false,
                Messages = new List<Message>() {
                        new Message() { MessageType = Message.MessageTypeEnum.ExceptionEnum,
                        Code = "500", Text = aasEx.Message, Timestamp = DateTime.UtcNow.ToString("o")} }
            });
        }
    }
}
