/*
 * DotAAS Part 2 | HTTP/REST | Entire Interface Collection
 *
 * The entire interface collection as part of Details of the Asset Administration Shell Part 2
 *
 * OpenAPI spec version: Final-Draft
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using AAS.API.Attributes;

using Microsoft.AspNetCore.Authorization;
using AAS.API.Models;
using Microsoft.Extensions.Logging;
using AAS.API.Registry;
using System.Web;

namespace AAS.API.WebApp.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [Authorize]
    [ApiController]
    public class AssetAdministrationShellRegistryInterfaceApiController : ControllerBase
    {
        private readonly ILogger _logger;

        private AASRegistry registryService;

        public AssetAdministrationShellRegistryInterfaceApiController(ILogger<AssetAdministrationShellRegistryInterfaceApiController> log, AASRegistry registry)
        {
            _logger = log;
            registryService = registry;
        }

        /// <summary>
        /// Deletes an Asset Administration Shell Descriptor, i.e. de-registers an AAS
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <response code="204">Asset Administration Shell Descriptor deleted successfully</response>
        [HttpDelete]
        [Route("api/v1/registry/shell-descriptors/{aasIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteAssetAdministrationShellDescriptorById")]
        public virtual IActionResult DeleteAssetAdministrationShellDescriptorById([FromRoute][Required]string aasIdentifier)
        {
            _logger.LogInformation($"DeleteAssetAdministrationShellDescriptorById called for Asset identifier '{aasIdentifier}'");

            if (registryService == null)
            {
                _logger.LogError("Invalid setup. No Registry service configured. Check DI setup");
                throw new AASRegistryException("Invalid setup. No Registry service configured. Check DI setup");
            }

            registryService.DeleteAssetAdministrationShellDescriptorById(HttpUtility.UrlDecode(aasIdentifier)).GetAwaiter().GetResult();

            return StatusCode(204);
        }

        /*
        /// <summary>
        /// Deletes a Submodel Descriptor, i.e. de-registers a submodel
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <response code="204">Submodel Descriptor deleted successfully</response>
        [HttpDelete]
        [Route("api/v1/registry/shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteSubmodelDescriptorByIdAASRegistry")]
        public virtual IActionResult DeleteSubmodelDescriptorByIdAASRegistry([FromRoute][Required]string aasIdentifier, [FromRoute][Required]string submodelIdentifier)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            throw new NotImplementedException();
        }
        */

        /// <summary>
        /// Returns all Asset Administration Shell Descriptors
        /// </summary>
        /// <response code="200">Requested Asset Administration Shell Descriptors</response>
        [HttpGet]
        [Route("api/v1/registry/shell-descriptors")]
        [ValidateModelState]
        [SwaggerOperation("GetAllAssetAdministrationShellDescriptors")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AssetAdministrationShellDescriptor>), description: "Requested Asset Administration Shell Descriptors")]
        public virtual IActionResult GetAllAssetAdministrationShellDescriptors()
        { 
            // Currently not supported. Redis Cache doesn't have 'list all' operations
            return StatusCode(200, default(List<AssetAdministrationShellDescriptor>));
        }

        /*
        /// <summary>
        /// Returns all Submodel Descriptors
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <response code="200">Requested Submodel Descriptors</response>
        [HttpGet]
        [Route("api/v1/registry/shell-descriptors/{aasIdentifier}/submodel-descriptors")]
        [ValidateModelState]
        [SwaggerOperation("GetAllSubmodelDescriptorsAASRegistry")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<SubmodelDescriptor>), description: "Requested Submodel Descriptors")]
        public virtual IActionResult GetAllSubmodelDescriptorsAASRegistry([FromRoute][Required]string aasIdentifier)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<SubmodelDescriptor>));
            string exampleJson = null;
            exampleJson = "[ {\n  \"idShort\" : \"idShort\",\n  \"description\" : [ null, null ]\n}, {\n  \"idShort\" : \"idShort\",\n  \"description\" : [ null, null ]\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<SubmodelDescriptor>>(exampleJson)
                        : default(List<SubmodelDescriptor>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
        */

        /// <summary>
        /// Returns a specific Asset Administration Shell Descriptor
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <response code="200">Requested Asset Administration Shell Descriptor</response>
        [HttpGet]
        [Route("api/v1/registry/shell-descriptors/{aasIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("GetAssetAdministrationShellDescriptorById")]
        [SwaggerResponse(statusCode: 200, type: typeof(AssetAdministrationShellDescriptor), description: "Requested Asset Administration Shell Descriptor")]
        public virtual IActionResult GetAssetAdministrationShellDescriptorById([FromRoute][Required]string aasIdentifier)
        {
            _logger.LogInformation($"GetAssetAdministrationShellDescriptorById called for Asset identifier '{aasIdentifier}'");

            if (registryService == null)
            {
                _logger.LogError("Invalid setup. No Registry service configured. Check DI setup");
                throw new AASRegistryException("Invalid setup. No Registry service configured. Check DI setup");
            }

            return new ObjectResult(registryService.GetAssetAdministrationShellDescriptorById(HttpUtility.UrlDecode(aasIdentifier)).GetAwaiter().GetResult());
        }

        /*
        /// <summary>
        /// Returns a specific Submodel Descriptor
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <response code="200">Requested Submodel Descriptor</response>
        [HttpGet]
        [Route("api/v1/registry/shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("GetSubmodelDescriptorByIdAASRegistry")]
        [SwaggerResponse(statusCode: 200, type: typeof(SubmodelDescriptor), description: "Requested Submodel Descriptor")]
        public virtual IActionResult GetSubmodelDescriptorByIdAASRegistry([FromRoute][Required]string aasIdentifier, [FromRoute][Required]string submodelIdentifier)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SubmodelDescriptor));
            string exampleJson = null;
            exampleJson = "{\n  \"idShort\" : \"idShort\",\n  \"description\" : [ null, null ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<SubmodelDescriptor>(exampleJson)
                        : default(SubmodelDescriptor);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
        */

        /// <summary>
        /// Creates a new Asset Administration Shell Descriptor, i.e. registers an AAS
        /// </summary>
        /// <param name="body">Asset Administration Shell Descriptor object</param>
        /// <response code="201">Asset Administration Shell Descriptor created successfully</response>
        [HttpPost]
        [Route("api/v1/registry/shell-descriptors")]
        [ValidateModelState]
        [SwaggerOperation("PostAssetAdministrationShellDescriptor")]
        [SwaggerResponse(statusCode: 201, type: typeof(AssetAdministrationShellDescriptor), description: "Asset Administration Shell Descriptor created successfully")]
        public virtual IActionResult PostAssetAdministrationShellDescriptor([FromBody]AssetAdministrationShellDescriptor body)
        {
            _logger.LogInformation($"PostAssetAdministrationShellDescriptor called for AAS with identifier '{body.Identification}'");

            if (registryService == null)
            {
                _logger.LogError("Invalid setup. No Registry service configured. Check DI setup");
                throw new AASRegistryException("Invalid setup. No Registry service configured. Check DI setup");
            }

            return StatusCode(201, registryService.CreateAssetAdministrationShellDescriptor(body).GetAwaiter().GetResult());
        }

        /*
        /// <summary>
        /// Creates a new Submodel Descriptor, i.e. registers a submodel
        /// </summary>
        /// <param name="body">Submodel Descriptor object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <response code="201">Submodel Descriptor created successfully</response>
        [HttpPost]
        [Route("api/v1/registry/shell-descriptors/{aasIdentifier}/submodel-descriptors")]
        [ValidateModelState]
        [SwaggerOperation("PostSubmodelDescriptorAASRegistry")]
        [SwaggerResponse(statusCode: 201, type: typeof(SubmodelDescriptor), description: "Submodel Descriptor created successfully")]
        public virtual IActionResult PostSubmodelDescriptorAASRegistry([FromBody]SubmodelDescriptor body, [FromRoute][Required]string aasIdentifier)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(SubmodelDescriptor));
            string exampleJson = null;
            exampleJson = "{\n  \"idShort\" : \"idShort\",\n  \"description\" : [ null, null ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<SubmodelDescriptor>(exampleJson)
                        : default(SubmodelDescriptor);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
        */

        /// <summary>
        /// Updates an existing Asset Administration Shell Descriptor
        /// </summary>
        /// <param name="body">Asset Administration Shell Descriptor object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <response code="204">Asset Administration Shell Descriptor updated successfully</response>
        [HttpPut]
        [Route("api/v1/registry/shell-descriptors/{aasIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("PutAssetAdministrationShellDescriptorById")]
        public virtual IActionResult PutAssetAdministrationShellDescriptorById([FromBody]AssetAdministrationShellDescriptor body, [FromRoute][Required]string aasIdentifier)
        {
            _logger.LogInformation($"PutAssetAdministrationShellDescriptorById called for AAS with identifier '{body.Identification}'");

            if (registryService == null)
            {
                _logger.LogError("Invalid setup. No Registry service configured. Check DI setup");
                throw new AASRegistryException("Invalid setup. No Registry service configured. Check DI setup");
            }

            registryService.UpdateAssetAdministrationShellDescriptorById(body/*, HttpUtility.UrlDecode(aasIdentifier)*/).GetAwaiter().GetResult();

            return StatusCode(204);
        }

        /*
        /// <summary>
        /// Updates an existing Submodel Descriptor
        /// </summary>
        /// <param name="body">Submodel Descriptor object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <response code="204">Submodel Descriptor updated successfully</response>
        [HttpPut]
        [Route("api/v1/registry/shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("PutSubmodelDescriptorByIdAASRegistry")]
        public virtual IActionResult PutSubmodelDescriptorByIdAASRegistry([FromBody]SubmodelDescriptor body, [FromRoute][Required]string aasIdentifier, [FromRoute][Required]string submodelIdentifier)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            throw new NotImplementedException();
        }
        */
    }
}
